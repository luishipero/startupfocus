#!/usr/bin/env node
'use strict';

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _loader = require('./loader');

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CONFIG_GROUP = 'Config options:';
var options = {};

var argv = _yargs2.default.usage('Usage: babel-node $0 [args]').help('help').alias('help', 'h').alias('help', '?').version(_package2.default.version).alias('version', 'v').options({
  config: {
    type: 'string',
    describe: 'Path to the config file',
    group: CONFIG_GROUP,
    defaultDescription: 'webpack.config.js or webpackfile.js',
    requiresArg: false
  }
}).alias('config', 'c').example('babel-node node-hot --config webpack.config.js', 'Using a specific webpack config file.').example('babel-node node-hot', 'Using default webpack config file.').showHelpOnFail(false, 'Use the --help option to get the list of available options.').check(function (args) {
  if (args.config) {
    var configPath = _path2.default.join(process.cwd(), args.config);
    if (!_fs2.default.existsSync(configPath)) {
      throw new Error('Webpack config file ' + configPath + ' not found!');
    }
    options.webpackConfig = configPath;
  }
  return true;
}).strict().argv;

(0, _loader.loader)(options);