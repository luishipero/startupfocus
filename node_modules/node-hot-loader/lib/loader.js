'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loader = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Add hmrClient to all entries.
 * @param module
 * @returns {Promise.<config>}
 */
function tweakWebpackConfig(module) {
  var _module$default = module.default,
      webpackConfig = _module$default === undefined ? module : _module$default;

  var config = Array.isArray(webpackConfig) ? webpackConfig.find(function (c) {
    return c.target === 'node';
  }) : webpackConfig;
  if (config.target !== 'node') throw new Error('Webpack configuration file must provide config with target "node".');

  var hmrClientEntry = _path2.default.resolve(process.cwd(), 'node_modules/node-hot-loader/lib/HmrClient');

  var addHmrClientEntry = function addHmrClientEntry(entry, owner) {
    if (Array.isArray(owner[entry])) owner[entry].splice(-1, 0, hmrClientEntry);else if (typeof owner[entry] === 'string') owner[entry] = [hmrClientEntry, owner[entry]];else if (typeof owner[entry] === 'function') {
      // Call function and try again with function result.
      owner[entry] = owner[entry]();
      addHmrClientEntry(entry, owner);
    } else if (_typeof(owner[entry]) === 'object') Object.getOwnPropertyNames(owner[entry]).forEach(function (name) {
      return addHmrClientEntry(name, owner[entry]);
    });
  };

  // Add HmrClient to every entries.
  addHmrClientEntry('entry', config);

  // Add source-map support.
  if (config.devtool && config.devtool.indexOf('source-map') >= 0) {
    config.plugins.push(new _webpack2.default.BannerPlugin({
      banner: ';require(\'' + require.resolve('source-map-support').replace(/\\/g, '/') + '\').install();',
      raw: true,
      entryOnly: false
    }));
  }

  // Enable HMR globally if not.
  if (!config.plugins.find(function (p) {
    return p instanceof _webpack2.default.HotModuleReplacementPlugin;
  })) {
    config.plugins.push(new _webpack2.default.HotModuleReplacementPlugin());
  }
  // Prints more readable module names in the console on HMR updates.
  if (!config.plugins.find(function (p) {
    return p instanceof _webpack2.default.NamedModulesPlugin;
  })) {
    config.plugins.push(new _webpack2.default.NamedModulesPlugin());
  }
  // In order for don't emit files if errors occurred.
  if (!config.plugins.find(function (p) {
    return p instanceof _webpack2.default.NoEmitOnErrorsPlugin;
  })) {
    config.plugins.push(new _webpack2.default.NoEmitOnErrorsPlugin());
  }

  return config;
}

/**
 * Add compiler hooks and start watching (through compiler) for changes.
 * @param compiler
 * @returns {Promise.<HmrServer>|*}
 */
function hooks(compiler) {
  var context = {
    serverProcess: null,
    state: false, // valid or invalid state
    webpackStats: undefined, // last compiler stats
    options: compiler.options, // options from webpack config
    compiler: compiler,
    watching: undefined };
  return Promise.resolve().then(function () {
    return require('./HmrServer');
  }).then(function (_ref) {
    var HmrServer = _ref.default;
    return new HmrServer(context).run();
  });
}

var defaultOptions = {
  webpackConfig: _path2.default.join(process.cwd(), 'webpack.config.js')
};

function loader(options) {
  options = Object.assign(defaultOptions, options);
  Promise.resolve().then(function (config) {
    return Promise.resolve().then(function () {
      return require('babel-register');
    });
  }).then(function () {
    return Promise.resolve().then(function () {
      return require('' + options.webpackConfig);
    });
  }).then(function (module) {
    return tweakWebpackConfig(module);
  }).then(function (webpackConfig) {
    return (0, _webpack2.default)(webpackConfig);
  }).then(function (compiler) {
    return hooks(compiler);
  }).catch(function (err) {
    return console.error(err);
  });
}

exports.loader = loader;