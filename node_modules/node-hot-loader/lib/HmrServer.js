'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _pathIsAbsolute = require('path-is-absolute');

var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

var _LogColors = require('./LogColors');

var _LogColors2 = _interopRequireDefault(_LogColors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HmrServer = function () {
  _createClass(HmrServer, null, [{
    key: 'defaultReporter',
    value: function defaultReporter(reporterOptions) {
      var state = reporterOptions.state,
          stats = reporterOptions.stats,
          options = reporterOptions.options;


      if (state) {
        var displayStats = !options.quiet && options.stats !== false;
        if (displayStats && !(stats.hasErrors() || stats.hasWarnings()) && options.noInfo) {
          displayStats = false;
        }
        if (displayStats) {
          var statsInfo = stats.toString(options.stats);
          if (statsInfo) {
            // To avoid log empty statsInfo, e.g. when options.stats is 'errors-only'.
            options.log(statsInfo);
          }
        }
        if (!options.noInfo && !options.quiet) {
          var msg = 'Compiled successfully.';
          if (stats.hasErrors()) {
            msg = 'Failed to compile.';
          } else if (stats.hasWarnings()) {
            msg = 'Compiled with warnings.';
          }
          options.log(_LogColors2.default.magenta('Webpack') + ': ' + msg);
        }
      } else {
        options.log(_LogColors2.default.magenta('Webpack') + ': Compiling...');
      }
    }
  }]);

  function HmrServer(context) {
    _classCallCheck(this, HmrServer);

    _initialiseProps.call(this);

    this.context = Object.assign({}, context);
    var options = context.options || {};
    if (typeof options.watchOptions === 'undefined') options.watchOptions = {};
    if (typeof options.reporter !== 'function') options.reporter = HmrServer.defaultReporter;
    if (typeof options.log !== 'function') options.log = console.log.bind(console);
    if (typeof options.warn !== 'function') options.warn = console.warn.bind(console);
    if (typeof options.error !== 'function') options.error = console.error.bind(console);
    if (typeof options.watchOptions.aggregateTimeout === 'undefined') options.watchOptions.aggregateTimeout = 200;
    if (typeof options.stats === 'undefined') options.stats = {};
    if (_typeof(options.stats) === 'object' && !options.stats.context) options.stats.context = process.cwd();
    var compiler = this.context.compiler;
    if (typeof compiler.outputPath === 'string' && !_pathIsAbsolute2.default.posix(compiler.outputPath) && !_pathIsAbsolute2.default.win32(compiler.outputPath)) {
      throw new Error('`output.path` needs to be an absolute path or `/`.');
    }
    this.context.options = options;
    // Don use memory-fs because we can't fork bundle fom in-memory file.
    this.context.fs = _fs2.default;
  }

  return HmrServer;
}();

var _initialiseProps = function _initialiseProps() {
  var _this = this,
      _arguments = arguments;

  Object.defineProperty(this, 'sendMessage', {
    enumerable: true,
    writable: true,
    value: function value(action) {
      _this.context.serverProcess && _this.context.serverProcess.send({
        action: action,
        stats: _this.context.webpackStats.toJson()
      });
    }
  });
  Object.defineProperty(this, 'forkProcess', {
    enumerable: true,
    writable: true,
    value: function value(stats) {
      var getLauncherFileName = function getLauncherFileName() {
        var assets = stats.compilation.assets;
        var names = Object.getOwnPropertyNames(assets).filter(function (k) {
          return assets[k].emitted && _path2.default.extname(assets[k].existsAt) === '.js';
        });

        if (names.length === 1) {
          // Only one valid assets, so just return it path
          return assets[names[0]].existsAt;
        } else {
          // Create temp launcher file which aggregates all assets.
          var launcherString = names.map(function (k) {
            return 'require(\'' + assets[k].existsAt.replace(/\\/g, '/') + '\');';
          }).join('\n');

          var launcherFileName = _path2.default.resolve(stats.compilation.compiler.outputPath, 'launcher.' + stats.hash + '.js');
          _this.context.fs.writeFileSync(launcherFileName, launcherString);

          // Delete created files on exit main process.
          process.on('exit', function () {
            _this.context.fs.unlinkSync(launcherFileName);
          });
          process.on('SIGINT', function () {
            _this.context.fs.unlinkSync(launcherFileName);
          });

          return launcherFileName;
        }
      };

      // Execute built scripts
      var options = {
        cwd: process.cwd(),
        env: process.env
      };
      if (process.getuid) {
        options.uid = process.getuid();
        options.gid = process.getgid();
      }
      _this.context.serverProcess = (0, _child_process.fork)(getLauncherFileName(), process.argv, options);

      // Listen for serverProcess events.
      _this.context.serverProcess.on('exit', function (code) {
        // Exit node process when exit serverProcess.
        process.exit(code);
      });
    }
  });
  Object.defineProperty(this, 'compilerDone', {
    enumerable: true,
    writable: true,
    value: function value(stats) {
      // We are now on valid state
      _this.context.state = true;
      _this.context.webpackStats = stats;

      // Do the stuff in nextTick, because bundle may be invalidated
      // if a change happened while compiling
      process.nextTick(function () {
        // check if still in valid state
        if (!_this.context.state) return;

        // print webpack output
        _this.context.options.reporter({
          state: true,
          stats: stats,
          options: _this.context.options
        });

        if (_this.context.serverProcess) {
          _this.sendMessage('built');
        } else {
          // Start compiled files in child process.
          _this.forkProcess(stats);
        }
      });
    }
  });
  Object.defineProperty(this, 'compilerInvalid', {
    enumerable: true,
    writable: true,
    value: function value() {
      _this.sendMessage('compile');

      if (_this.context.state && !_this.context.options.noInfo && !_this.context.options.quiet) {
        _this.context.options.reporter({
          state: false,
          options: _this.context.options
        });
      }

      // We are now in invalid state
      _this.context.state = false;
      // resolve async
      if (_arguments.length === 2 && typeof _arguments[1] === 'function') {
        var callback = _arguments[1];
        callback();
      }
    }
  });
  Object.defineProperty(this, 'compilerWatch', {
    enumerable: true,
    writable: true,
    value: function value(err) {
      if (err) {
        _this.context.options.error(err.stack || err);
        if (err.details) _this.context.options.error(err.details);
      }
    }
  });
  Object.defineProperty(this, 'startWatch', {
    enumerable: true,
    writable: true,
    value: function value() {
      var options = _this.context.options;
      var compiler = _this.context.compiler;
      // start watching
      _this.context.watching = compiler.watch(options.watchOptions, _this.compilerWatch);
      console.info(_LogColors2.default.cyan('[HMR]'), 'Waiting webpack...');
    }
  });
  Object.defineProperty(this, 'run', {
    enumerable: true,
    writable: true,
    value: function value() {
      _this.context.compiler.plugin('done', _this.compilerDone);
      _this.context.compiler.plugin('compile', _this.compilerInvalid);
      _this.startWatch();
      return _this;
    }
  });
};

exports.default = HmrServer;